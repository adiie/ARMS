package player;
/*
 * SamplingGraphs.java
 *
 * Created on February 17, 2007, 8:32 AM
 */

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import java.util.Vector;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.swing.JPanel;
import wavemark.*;
import player.Capture;
import player.Playback;
import util.WaveInfo;

/**
 *
 * @author  ady
 */
public class SamplingGraphs extends javax.swing.JPanel implements Runnable {

    private AudioInputStream audioInputStream;
    private WaveInfo waveInfo;
    private Thread thread;
    private Playback playback;
    private Capture capture;
    private Font font10 = new Font("serif", Font.PLAIN, 10);
    private Font font12 = new Font("Tahoma", Font.PLAIN, 11);
    private Color jfcBlue = new Color(245, 213, 0);
    //private Color jfcBlue = new Color(0, 207, 255);
    private Color pink = new Color(255, 175, 175);
    private Vector lines = new Vector();
    private double seconds,duration;

    /** Creates new form SamplingGraphs */
    public SamplingGraphs(Playback playback, Capture capture) {
        this.playback = playback;
        this.capture = capture;
        initComponents();
        //setBackground(new Color(155,177,195));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 498, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 130, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
        public void setSourceStream(AudioInputStream audioInputStream){
            this.audioInputStream = audioInputStream;
        }

        public void setSourceStream(WaveInfo waveInfo){
            this.waveInfo = waveInfo;
            this.audioInputStream = waveInfo.getAudioInputStream();
        }
        
        public void clearGraph(){
            this.waveInfo = null;
            this.audioInputStream = null;
            this.duration = 0.0;
            this.createWaveForm();
        }
        public void createWaveForm() {

            this.lines.removeAllElements();  // clear the old vector

            if (this.audioInputStream != null){
                AudioFormat format = this.audioInputStream.getFormat();            
            
                long milliseconds = (long)((this.audioInputStream.getFrameLength() * 1000) / this.audioInputStream.getFormat().getFrameRate());
                this.duration = milliseconds / 1000.0;
            
            Dimension d = getSize();
            int w = d.width;
            int h = d.height-15;

            int[] audioData = waveInfo.getAudioSamples();

            int len = 1;
            if (format.getSampleSizeInBits() == 16){
                len = audioData.length * 2;
            }else{
                len = audioData.length;
            }
                
            
            int frames_per_pixel = len / format.getFrameSize()/w;
            byte my_byte = 0;
            double y_last = 0;
            int numChannels = format.getChannels();
            for (double x = 0; x < w && audioData != null; x++) {
                int idx = (int) (frames_per_pixel * numChannels * x);
                if (format.getSampleSizeInBits() == 8) {
                     my_byte = (byte) audioData[idx];
                } else {
                     my_byte = (byte) (128 * audioData[idx] / 32768 );
                }
                double y_new = (double) (h * (128 - my_byte) / 256);
                this.lines.add(new Line2D.Double(x, y_last, x, y_new));
                y_last = y_new;
            }
            }
            repaint();
        }


        public void paint(Graphics g) {

            Dimension d = getSize();
            int w = d.width;
            int h = d.height;
            int INFOPAD = 15;

            Graphics2D g2 = (Graphics2D) g;
            g2.setBackground(getBackground());
            g2.clearRect(0, 0, w, h);
            g2.setColor(Color.black);
            g2.fillRect(0, 0, w, h-INFOPAD);

            if (this.capture.thread != null) {
                g2.setColor(Color.black);
                g2.setFont(font12);
                g2.drawString("Length: " + String.valueOf(seconds), 3, h-4);
            } else{
                g2.setColor(Color.black);
                g2.setFont(font12);
                if (this.waveInfo != null)
                    g2.drawString("File: " + this.waveInfo.getFileName() + "  Length: " + String.valueOf(duration) + "  Position: " + String.valueOf(seconds), 3, h-4);              
                else    
                    g2.drawString("File: " + "  Length: " + String.valueOf(duration) + "  Position: " + String.valueOf(seconds), 3, h-4);
                    
                if (this.audioInputStream != null) {
                    // .. render sampling graph ..
                    g2.setColor(jfcBlue);
                    for (int i = 1; i < this.lines.size(); i++) {
                        g2.draw((Line2D) this.lines.get(i));
                    }

                    // .. draw current position ..
                    if (this.seconds != 0) {
                        double loc = this.seconds/this.duration*w;
                        g2.setColor(pink);
                        g2.setStroke(new BasicStroke(3));
                        g2.draw(new Line2D.Double(loc, 0, loc, h-INFOPAD-2));
                    }
                }
            }
        }
    
        public void start() {
            thread = new Thread(this);
            thread.setName("SamplingGraph");
            thread.start();
            this.seconds = 0;
        }

        public void stop() {
            if (this.thread != null) {
                this.thread.interrupt();
            }
            this.thread = null;
        }

        public void run() {
           this.seconds = 0;
            while (this.thread != null) {
                if ((this.playback.line != null) && (this.playback.line.isOpen()) ) {

                    long milliseconds = (long)(this.playback.line.getMicrosecondPosition() / 1000);
                    this.seconds =  milliseconds / 1000.0;
                } else if ( (this.capture.line != null) && (this.capture.line.isActive()) ) {

                    long milliseconds = (long)(capture.line.getMicrosecondPosition() / 1000);
                    this.seconds =  milliseconds / 1000.0;
                }

                try { this.thread.sleep(100); } catch (Exception e) { break; }

                repaint();
                                
                while ((this.capture.line != null && !this.capture.line.isActive()) ||
                       (this.playback.line != null && !this.playback.line.isOpen())) 
                {
                    try { this.thread.sleep(10); } catch (Exception e) { break; }
                }
            }
            this.seconds = 0;
            repaint();
        }
     // End class SamplingGraph
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
