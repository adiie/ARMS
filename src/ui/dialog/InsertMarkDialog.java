/*
 * InsertMarkDialog.java
 *
 * Created on April 4, 2007, 12:31 PM
 */

package ui.dialog;

import com.megginson.sax.DataWriter;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import org.xml.sax.SAXException;
import ui.MainForm;
import util.MessageInfo;
import util.Util;
import util.WaveInfo;
import watermark.WatermarkingFactory;
import wavemark.*;

/**
 *
 * @author  ady
 */
public class InsertMarkDialog extends javax.swing.JDialog {
    
    private WaveInfo waveInfo;
    private MainForm mainForm;
    private File configfile =  new File(System.getProperty("user.dir") + "\\preset\\default.wp"); 

    /** Creates new form InsertMarkDialog */
    public InsertMarkDialog(java.awt.Frame parent, boolean modal, MainForm mainForm, WaveInfo waveInfo) {
        super(parent, modal);
        this.waveInfo = waveInfo;
        this.mainForm = mainForm;
        initComponents();
        Point point = this.mainForm.getLocationOnScreen();
        this.setLocation(point.x,point.y+80);
        this.setLabelAvailable();
        this.applyConfig();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanelMenuInsert = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jRBMsgfromFile = new javax.swing.JRadioButton();
        jRBMsgfromText = new javax.swing.JRadioButton();
        jTextFieldMessageFile = new javax.swing.JTextField();
        jButtonLoadMessage = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneMessage = new javax.swing.JTextPane();
        jLabel9 = new javax.swing.JLabel();
        jLabelAvailable = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLblFileName = new javax.swing.JLabel();
        jLblFileSize = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLblFileType = new javax.swing.JLabel();
        jTFCharUsed = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButtonEmbeddExecute = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanelMethod = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabelState = new javax.swing.JLabel();
        jLabelState1 = new javax.swing.JLabel();
        jLabelState2 = new javax.swing.JLabel();
        jLabelState3 = new javax.swing.JLabel();
        jLabelState4 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabelTextPass = new javax.swing.JLabel();
        jPasswordField = new javax.swing.JPasswordField();
        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanelMenuInsert.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelMenuInsert.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        buttonGroup1.add(jRBMsgfromFile);
        jRBMsgfromFile.setText(" File");
        jRBMsgfromFile.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRBMsgfromFile.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jRBMsgfromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBMsgfromFileActionPerformed(evt);
            }
        });

        jPanel2.add(jRBMsgfromFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        buttonGroup1.add(jRBMsgfromText);
        jRBMsgfromText.setSelected(true);
        jRBMsgfromText.setText(" Text");
        jRBMsgfromText.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRBMsgfromText.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jRBMsgfromText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBMsgfromTextActionPerformed(evt);
            }
        });

        jPanel2.add(jRBMsgfromText, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        jPanel2.add(jTextFieldMessageFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 230, -1));

        jButtonLoadMessage.setText("...");
        jButtonLoadMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadMessageActionPerformed(evt);
            }
        });

        jPanel2.add(jButtonLoadMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 10, 30, 21));

        jTextPaneMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextPaneMessageKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextPaneMessageKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jTextPaneMessage);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 130, 270, 120));

        jLabel9.setText("available to embedd:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 260, -1, -1));

        jLabelAvailable.setText(" ");
        jPanel2.add(jLabelAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 260, 90, -1));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel12.setText("File Name");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel13.setText("Size");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        jLabel14.setText("Type");
        jPanel3.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 30, -1));

        jLabel15.setText(":");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, -1, -1));

        jLabel17.setText(":");
        jPanel3.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, -1, -1));

        jLblFileName.setText("   ");
        jPanel3.add(jLblFileName, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, -1, -1));

        jLblFileSize.setText("   ");
        jPanel3.add(jLblFileSize, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, -1, -1));

        jLabel22.setText(":");
        jPanel3.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 10, -1));

        jLblFileType.setText("   ");
        jPanel3.add(jLblFileType, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, -1, -1));

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 270, 70));

        jTFCharUsed.setText("0");
        jPanel2.add(jTFCharUsed, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 259, 60, -1));

        jPanelMenuInsert.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 380, 290));

        jLabel2.setFont(new java.awt.Font("Georgia", 1, 14));
        jLabel2.setText("Insert Watermark to an Audio File");
        jPanelMenuInsert.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jPanelMenuInsert.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 720, 10));

        jButtonEmbeddExecute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wavemark/images/misc.png")));
        jButtonEmbeddExecute.setMnemonic('E');
        jButtonEmbeddExecute.setText(" Execute");
        jButtonEmbeddExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEmbeddExecuteActionPerformed(evt);
            }
        });

        jPanelMenuInsert.add(jButtonEmbeddExecute, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 300, -1, -1));

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wavemark/images/insertmark.jpg")));
        jPanelMenuInsert.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 0, 50, 60));

        jLabel1.setText("To insert watermark choose audio file, choose or write watermark file, configuring neccesary option and hit Execute button. It's done!");
        jPanelMenuInsert.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jPanelMethod.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelMethod.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButtonSave.setMnemonic('C');
        jButtonSave.setText("Change");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jPanelMethod.add(jButtonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 120, 100, -1));

        jPanelMethod.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 380, 10));

        jLabelState.setText("jLabel4");
        jPanelMethod.add(jLabelState, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, -1, -1));

        jLabelState1.setText("jLabel4");
        jPanelMethod.add(jLabelState1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, -1, -1));

        jLabelState2.setText("jLabel4");
        jPanelMethod.add(jLabelState2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, -1, -1));

        jLabelState3.setText("jLabel4");
        jPanelMethod.add(jLabelState3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, -1, -1));

        jLabelState4.setText("jLabel4");
        jPanelMethod.add(jLabelState4, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, -1, -1));

        jLabel4.setText("Mode");
        jPanelMethod.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel5.setText("Method");
        jPanelMethod.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        jLabel16.setText("Behaviour");
        jPanelMethod.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel20.setText("Encryption");
        jPanelMethod.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jLabel21.setText("Compression");
        jPanelMethod.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        jLabel24.setText(":");
        jPanelMethod.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 20, -1));

        jLabel25.setText(":");
        jPanelMethod.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 20, -1));

        jLabel26.setText(":");
        jPanelMethod.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 20, -1));

        jLabel27.setText(":");
        jPanelMethod.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 20, -1));

        jLabel28.setText(":");
        jPanelMethod.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 20, -1));

        jLabelTextPass.setText("Password to encrypt/decrypt");
        jPanelMethod.add(jLabelTextPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, -1));

        jPanelMethod.add(jPasswordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 160, 150, -1));

        jPanelMenuInsert.add(jPanelMethod, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 70, 380, 210));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel10.setText("Embbedd Process Time");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 8, -1, -1));

        jLabel7.setText("   ");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 8, -1, -1));

        jLabel11.setText(":");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 8, 10, -1));

        jPanelMenuInsert.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 380, 30));

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wavemark/images/corner.jpg")));
        jPanelMenuInsert.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(687, 290, 110, 200));

        getContentPane().add(jPanelMenuInsert, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-800)/2, (screenSize.height-520)/2, 800, 520);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextPaneMessageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPaneMessageKeyReleased
// TODO add your handling code here:
        if (jTextPaneMessage.getText().length() <= this.countAvailableSpace()){
        int len = jTextPaneMessage.getText().length();
        int remain = this.countAvailableSpace() - len;
        jTFCharUsed.setText(String.valueOf(len));
        }else{
            jTextPaneMessage.setText(jTextPaneMessage.getText());
        }       
    }//GEN-LAST:event_jTextPaneMessageKeyReleased

    private void jTextPaneMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPaneMessageKeyPressed
// TODO add your handling code here:
        String text = jTextPaneMessage.getText();        
        if (jTextPaneMessage.getText().length() > this.countAvailableSpace()){
            jTextPaneMessage.setText(text.substring(0,text.length()-2));
        }        
    }//GEN-LAST:event_jTextPaneMessageKeyPressed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
// TODO add your handling code here:
        OptionDialog2 od = new OptionDialog2(this.mainForm, false, this, this.mainForm.getLocationOnScreen());
        od.setVisible(true);
        

    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonEmbeddExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEmbeddExecuteActionPerformed
    
        String pass = new String(jPasswordField.getPassword());
        MessageInfo messageInfo = null;
        
        if (jRBMsgfromFile.isSelected())
            messageInfo = new MessageInfo(new File(jTextFieldMessageFile.getText()));
        else
            messageInfo = new MessageInfo(jTextPaneMessage.getText());

        
        if (Util.getValue(this.configfile,"encrypt").equalsIgnoreCase("1") && pass.length() < 3){
            JOptionPane.showMessageDialog(this,"Insert password!! min 3 char!!","Warning",JOptionPane.WARNING_MESSAGE);           
        }else if(messageInfo.getSize() > this.countAvailableSpace() && Util.getValue(this.configfile,"warning").equalsIgnoreCase("1")){
            JOptionPane.showMessageDialog(this,"Message is larger than emmbed capacity", "Warning" ,JOptionPane.WARNING_MESSAGE);           
        }else{        

            if (Util.getValue(this.configfile,"encrypt").equalsIgnoreCase("1")){
                messageInfo = Util.EncryptMessageInfo(messageInfo,new String(jPasswordField.getPassword()));
            }
            
            if (Util.getValue(this.configfile,"compress").equalsIgnoreCase("1")){
                try {
                    messageInfo = Util.compressMessageInfo(messageInfo, 9);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
            
            
            Calendar cal1 = Calendar.getInstance();
            HashMap map =  Util.setToHashMap(this.configfile);
            map.put("maxcaps", this.countAvailableSpace());
            
            WatermarkingFactory wm = new WatermarkingFactory(this.waveInfo, messageInfo, map);
            wm.applyWatermark();
            
            Calendar cal2 = Calendar.getInstance();
              
            long timeElapse = cal2.getTimeInMillis() - cal1.getTimeInMillis();
            double seconds = timeElapse/1000.0;
            this.jLabel7.setText(seconds + " seconds");
                
            this.mainForm.addStreamtoList(1, wm.getTargetWave());
            this.mainForm.setStreamList();
            this.mainForm.sgTarget.setSourceStream((WaveInfo) this.mainForm.streamHolder.get(1));
            this.mainForm.sgTarget.createWaveForm();
        }
    }//GEN-LAST:event_jButtonEmbeddExecuteActionPerformed

    private void jButtonLoadMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadMessageActionPerformed
        try {
            File file = new File(System.getProperty("user.dir"));
            JFileChooser fc = new JFileChooser(file);
            fc.setFileFilter(new javax.swing.filechooser.FileFilter() {
                public boolean accept(File f) {
                    if (f.isDirectory()) {
                        return true;
                    }
                    String name = f.getName();
                    if (name.endsWith(".txt")) {
                        return true;
                    }
                    return false;
                }
                public String getDescription() {
                    return ".txt";
                }
            });
            
            if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                jTextFieldMessageFile.setText(fc.getSelectedFile().getCanonicalPath());
                String filename = fc.getSelectedFile().getName();
                jLblFileName.setText(filename);
                jLblFileSize.setText(fc.getSelectedFile().length() + " bytes");
                String ext = Util.getExtensionFile(filename);
                jLblFileType.setText( ext + "(" + Util.getTypeFile(ext) + ")");
            }
        } catch (SecurityException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButtonLoadMessageActionPerformed

    private void jRBMsgfromTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBMsgfromTextActionPerformed
        jTextFieldMessageFile.setEnabled(jRBMsgfromFile.isSelected());
        jButtonLoadMessage.setEnabled(jRBMsgfromFile.isSelected());
        jTextPaneMessage.setEnabled(!jRBMsgfromFile.isSelected());
    }//GEN-LAST:event_jRBMsgfromTextActionPerformed

    private void jRBMsgfromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBMsgfromFileActionPerformed
        jTextFieldMessageFile.setEnabled(jRBMsgfromFile.isSelected());
        jButtonLoadMessage.setEnabled(jRBMsgfromFile.isSelected());
        jTextPaneMessage.setEnabled(!jRBMsgfromFile.isSelected());
    }//GEN-LAST:event_jRBMsgfromFileActionPerformed
    
    private int countAvailableSpace() {
        int length = this.waveInfo.getLengthSample();
        int lenAvailable = 0;
        
        int method =  Integer.parseInt(Util.getValue(this.configfile, "method"));
        if (method == 0){
            int bitReplaced = Integer.parseInt(Util.getValue(this.configfile,"lsb"));                    
            lenAvailable = ((length - WatermarkingFactory.HEADER_LENGTH) * bitReplaced) / 8;
        }else{
            lenAvailable = ((length - WatermarkingFactory.HEADER_LENGTH)/WatermarkingFactory.ECHO_NUM) / 8;//*1024.0);
        }
        return lenAvailable;
    }

    public void setLabelAvailable() {
       int space = this.countAvailableSpace();
       //this.jLabelAvailabletoEmbed.setText("*Available to hide " + space + " Byte message size");   
       jLabelAvailable.setText(String.valueOf(space) + " bytes");        
    }
    
    public void applyConfig(){
        String state1 ="";
        int mode =  Integer.parseInt(Util.getValue(this.configfile, "mode"));
        
        if (mode == 0)
           state1 ="Blind Watermarking";
        else
           state1 ="Non Blind (Sync) Watermarking";
        
        
        String state2="";
        int method =  Integer.parseInt(Util.getValue(this.configfile, "method"));
        if (method == 0){
            int lsb = Integer.parseInt(Util.getValue(this.configfile,"lsb"));
            state2 = "Low Bit Coding with LSB: " + lsb;
        }else{
            state2 = "Echo Hiding with echo amplitude: " + Util.getValue(this.configfile,"amplitude");  
        }
        
        String state3="";
        int warning = Integer.parseInt(Util.getValue(this.configfile, "warning"));
        if(warning==1)    
            state3 = "Display warning when message larger than capacity";
        else
            state3 = "Cut message when message larger than capacity";
        
        String state4="";
        int encrypt = Integer.parseInt(Util.getValue(this.configfile, "encrypt"));    
        if(encrypt==1){    
            state4 = "encrypted";
            this.showTextFieldPass(true);
        }else{
            state4 = "not encrypted";
            this.showTextFieldPass(false);
        }
        String state5="";
        int compress = Integer.parseInt(Util.getValue(this.configfile, "compress")); 
        if(compress==1){    
            state5 ="compressed with compression level " + Util.getValue(this.configfile, "compresslevel");
        }else
            state5 ="not compressed";
        
        jLabelState.setText(state1);
        jLabelState1.setText(state2);
        jLabelState2.setText(state3);
        jLabelState3.setText(state4);
        jLabelState4.setText(state5);
    }
    
    private void showTextFieldPass(boolean state){
        jPasswordField.setVisible(state);
        jLabelTextPass.setVisible(state);
    }
    
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonEmbeddExecute;
    private javax.swing.JButton jButtonLoadMessage;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelAvailable;
    private javax.swing.JLabel jLabelState;
    private javax.swing.JLabel jLabelState1;
    private javax.swing.JLabel jLabelState2;
    private javax.swing.JLabel jLabelState3;
    private javax.swing.JLabel jLabelState4;
    private javax.swing.JLabel jLabelTextPass;
    private javax.swing.JLabel jLblFileName;
    private javax.swing.JLabel jLblFileSize;
    private javax.swing.JLabel jLblFileType;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelMenuInsert;
    private javax.swing.JPanel jPanelMethod;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JRadioButton jRBMsgfromFile;
    private javax.swing.JRadioButton jRBMsgfromText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jTFCharUsed;
    private javax.swing.JTextField jTextFieldMessageFile;
    private javax.swing.JTextPane jTextPaneMessage;
    // End of variables declaration//GEN-END:variables
    
}
